name: Frontend Dev CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  project-directory: ./

jobs:
  frontend:
    name: Build Frontend Project
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, 'skip-ci')
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 18.x
        uses: actions/setup-node@v1
        with:
          node-version: '18.x'

      # only install dependencies
      # https://github.com/cypress-io/github-action
      - name: Install ðŸ“¦
        uses: cypress-io/github-action@v2
        with:
          runTests: false

      # define the endpoints for DEV in github secrets
      - name: build frontend project
        run: ${{ secrets.DEV_APP_ENDPOINTS }} CI= npm run build
        working-directory: ${{ env.project-directory }}

      # Install cached NPM dependencies, run end to end tests
      - name: Cypress E2E Tests ðŸ§ª
        uses: cypress-io/github-action@v2
        with:
          install: false
          # run these before testing
          start: npm run start
          # wait for server to be ready
          wait-on: 'http://localhost:3000'

      - uses: actions/upload-artifact@v2
        if: github.event_name == 'push' && github.repository == "Greenstand/${{ github.event.repository.name }}"
        with:
          name: frontend-bundle
          path: build

      - name: Save screenshots
        # step runs even if other steps fail
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Save videos
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: cypress-videos
          path: cypress/videos

  release:
    name: Release semantic version
    needs: frontend
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, 'skip-ci') &&
      github.event_name == 'push' &&
      github.repository == "Greenstand/${{ github.event.repository.name }}"
    steps:
      # check out repository code and setup node
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '18.x'
      # install dependencies and run semantic-release
      - run: npm i -g semantic-release @semantic-release/{git,exec,changelog}
      - run: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    name: Deploy to DEV CDN
    runs-on: ubuntu-latest
    needs: release
    if: |
      !contains(github.event.head_commit.message, 'skip-ci') &&
      github.event_name == 'push' &&
      github.repository == "Greenstand/${{ github.event.repository.name }}"
    steps:
      - uses: actions/checkout@v2
      - name: Download bundled frontend resources
        uses: actions/download-artifact@v2
        with:
          name: frontend-bundle
          path: build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET }}
          aws-region: us-east-1
      - name: Copy front end resources to s3 bucket
        run: |
          aws s3 sync build s3://${{ secrets.DEV_CDN_S3_BUCKET }} --delete
      - name: Invalidate cloudfront caches
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.DEV_CDN_DISTRIBUTION_ID }} --paths "/*"
